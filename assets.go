// Code generated by go-bindata. DO NOT EDIT.
// sources:
// index.html
// application.js

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x69\x73\xdc\xb6\xcf\x7f\x1d\x7f\x0a\x44\x99\x3e\x6d\xd3\x6a\xb5" +
	"\x87\xcf\xb5\x76\x67\x1c\xdb\xf1\x1d\xc7\x57\x12\xbb\xd3\x17\x94\x04\x49\xb4\x29\x52\x21\xa9\x3d\xec\xc9\x77\x7f" +
	"\x86\x3a\x76\xb5\x47\x12\x37\xe9\xbf\xc9\x8c\x2d\x42\x00\x88\x1f\x08\xe2\x90\xdd\x97\x7b\xe7\xbb\xd7\xb7\xef\xf7" +
	"\x21\xd6\x09\xeb\xaf\xb8\xe6\x17\x30\xc2\xa3\x9e\x85\xdc\xea\xaf\x00\xb8\x31\x92\xc0\x3c\x00\xb8\x09\x6a\x02\x7e" +
	"\x4c\xa4\x42\xdd\xb3\x32\x1d\xda\x9b\x56\xfd\x55\xac\x75\x6a\xe3\xe7\x8c\x0e\x7a\xd6\x27\xfb\x66\xc7\xde\x15\x49" +
	"\x4a\x34\xf5\x18\x5a\xe0\x0b\xae\x91\xeb\x9e\x75\xb4\xdf\xc3\x20\xc2\x19\x49\x4e\x12\xec\x59\x03\x8a\xc3\x54\x48" +
	"\x5d\x63\x1e\xd2\x40\xc7\xbd\x00\x07\xd4\x47\x3b\x5f\xfc\x09\x94\x53\x4d\x09\xb3\x95\x4f\x18\xf6\x5a\x95\xa2\x97" +
	"\xb6\x0d\xd7\x31\x02\xf1\xc4\x00\xa1\x03\xb9\x62\x4d\x22\x05\xaf\x93\x4c\xe9\xd7\xe0\x8b\x04\x21\xa4\x52\x69\xa0" +
	"\x1c\x74\x8c\x60\xb0\x6d\x03\xe1\x63\x10\x3a\x46\x99\xaf\xab\xbd\xc1\x08\x15\x32\xaf\x49\xa8\x51\xbe\x36\x22\x0a" +
	"\x0b\x95\xb6\x5d\xee\xaa\xa9\x66\xd8\xff\x40\x32\xa6\xe1\xfc\xfa\xbd\x7d\x73\xe4\x3a\x05\x6d\xa5\x60\x60\x94\x3f" +
	"\x80\x44\xd6\xb3\x12\xc2\x69\x88\x4a\x5b\x10\x4b\x0c\x7b\x96\xd2\x44\x53\xdf\xa9\xc8\x8d\x7b\x25\x8c\xcf\xa7\x68" +
	"\xde\x08\xa1\x95\x96\x24\x9d\x6e\x37\xd5\xa6\xf4\x98\xa1\x8a\x11\x27\xfa\x8c\xfb\x55\xd7\x71\xfc\x80\xdf\xab\x86" +
	"\xcf\x44\x16\x84\x8c\x48\x6c\xf8\x22\x71\xc8\x3d\x19\x39\x8c\x7a\xca\xd1\x43\xaa\x35\x4a\xdb\xab\xb4\x3b\x9d\x46" +
	"\xa7\xb1\xe1\xf8\x4a\x39\x13\x9a\xad\x63\x4c\xb0\x91\x50\xde\xf0\x95\xb2\xf2\xcd\x8b\x7f\x94\x6b\x8c\x24\xd5\xe3" +
	"\x9e\xa5\x62\xd2\x5e\x5b\xb7\xef\xae\x57\x0f\xdf\xa7\xc1\xee\xb9\x6e\xb3\xc1\xde\xc3\x27\xf1\x70\x98\xc5\xc7\x61" +
	"\x70\x7e\x72\xf5\xfe\xed\xe9\x23\xee\x1c\xd3\x87\xb5\x1b\xe7\xe2\x0f\xb6\xda\xb3\xc0\x97\x42\x29\x21\x69\x44\x79" +
	"\xcf\x22\x5c\xf0\x71\x22\x32\x65\x81\xf3\xef\x21\xcc\x51\x0c\x89\xf6\xe3\x12\x5a\x4a\x52\x94\x53\x70\xcf\x83\x75" +
	"\x3a\x3a\xa1\x87\xd7\x17\x0f\xa2\xb9\x77\xb3\x7b\x73\x15\xc9\xa3\x93\x76\xe7\xea\xf6\x6c\x9c\x0c\xc2\xec\x7e\x33" +
	"\x1b\x7d\x4a\x3c\xf6\x66\xf0\xe1\x63\xd2\xfc\x6f\x60\x85\x82\x6b\x9b\x0c\x51\x89\x04\x9d\xd5\xc6\x46\xa3\x99\x9f" +
	"\x59\x9d\xfc\x3c\x64\x78\x27\xe5\xb1\x3f\xdc\xf3\x9d\x4e\xb6\x17\xab\x40\xaf\xb7\xd4\x69\x5b\x9c\xbf\xb9\xed\xac" +
	"\xb7\x3f\x9f\x75\x98\xe0\xad\x68\xbc\x3f\x7a\x38\xfd\x0e\xb2\x02\x5a\x0e\xa8\x5f\xee\xe8\x89\x60\x0c\x4f\x90\x1b" +
	"\xa5\xe8\x23\x76\xa1\xb5\x9e\x8e\xb6\x21\x25\x41\x40\x79\x64\x6b\x91\x76\x61\xab\x69\x48\x5f\x4a\x11\x0a\x4f\x90" +
	"\x10\x19\x51\x6e\x4b\x1a\xc5\xba\x0b\xcd\xc6\x2a\x26\x53\x86\x57\x1a\x93\x94\x11\x8d\x0a\x9e\x20\xa0\x2a\x65\x64" +
	"\xdc\x05\x2e\x38\x4e\x79\x1a\x84\xa1\xd4\xf0\x04\x1e\xf1\x1f\x22\x29\x32\x1e\xd8\x34\x21\x11\x4e\x18\xa1\xe2\xf4" +
	"\x48\x10\xe1\x2c\xa7\x2f\x98\x90\x5d\x78\x85\x6d\xf3\x7f\x1b\xaa\xf5\xda\xda\xda\xf6\x0c\x96\x35\x63\x78\x4e\x18" +
	"\x62\x61\xab\x27\x58\xb0\x5d\xd9\x9f\xa3\xeb\xd4\xc1\x35\x7c\xe4\x1a\x25\x3c\x81\xc6\x91\xb6\x09\xa3\x11\xef\x42" +
	"\x41\xac\x71\xdd\x67\x89\x27\xb4\x14\x1c\xe2\xf6\xf7\x78\x85\x4e\x6d\xaa\x31\xc9\x1d\x97\xe7\xc4\x2e\xb4\x1a\xad" +
	"\xba\xc7\x1a\xa9\x47\xe4\x72\x88\xed\xd6\xd6\x7a\xd8\xd9\x86\xb8\xb4\xbf\xd5\x6c\xfe\x52\x17\x34\xe9\x8f\x50\x8e" +
	"\xcb\xc5\xb5\x24\x5c\xa5\x44\x22\xd7\x35\x15\xf9\x01\x0b\x45\x35\x15\xbc\x0b\xc4\x53\x82\x65\x1a\xb7\xc1\x13\x5a" +
	"\x8b\xa4\x0b\xcd\x6d\x60\x18\xea\xfc\xa1\x32\x38\xdf\xf6\xd1\xa6\x3c\xc0\x51\x17\xb6\xb6\xb6\x6a\x46\x98\xcc\x88" +
	"\xb6\xa2\x11\xc7\x80\x72\x78\xc5\x44\x44\xf9\x37\xce\xbe\xce\x2f\x32\x0d\xaf\x48\x9a\x32\xea\x13\x63\xcf\xd7\xc4" +
	"\x5c\xa7\x8c\xdb\x69\xbe\x3d\xbc\x3e\x3b\x5d\x03\x15\xd3\x04\x08\x0f\xe0\x12\x55\x2a\x78\xd0\xb8\x57\x10\x0a\x09" +
	"\x47\xfb\x9b\xa0\xb2\xd4\x14\x28\x10\x61\xc9\x8c\x0c\x13\xe4\x5a\xe5\x02\x09\x06\x94\xc0\xe7\x0c\x25\xc5\x5a\x89" +
	"\x30\xaa\x3f\xee\x5c\xbe\x3b\x7a\x77\xd0\xad\x2b\x0d\x04\x2a\xfe\xab\x86\xa1\x90\x0f\x40\x43\x18\x8b\x0c\x4c\x09" +
	"\xcc\x4b\x53\x4a\x22\x84\x01\x25\x10\x52\x86\x5d\xc7\x99\x51\xf7\x17\x0d\x81\x69\x38\xda\x87\xad\xbf\xab\x8b\xe7" +
	"\x2a\x5f\xd2\x54\x83\x92\xfe\xb3\x33\x8a\x29\xf7\x6b\x2a\xa6\x03\xa7\xd3\xd8\x68\x74\xa6\xeb\x3c\x8f\xdc\xcf\xa4" +
	"\x91\xe5\xa9\xa4\x73\x3c\x76\x0e\xbc\xab\x53\x19\x35\xc5\xd6\x78\xed\x6e\x8d\xb7\xb2\x61\xf3\xf3\xe8\x6e\x7f\xf7" +
	"\x70\x63\x77\xfd\xfc\x22\xfd\xf0\x26\x7a\xf7\xf6\x96\x34\xa3\xaf\xa7\x92\xbe\xeb\x14\xc6\xff\x0c\x16\x39\x71\xac" +
	"\xd3\x6a\xac\x36\xda\x13\xc2\x73\xa1\x44\xeb\x74\x27\x1c\xdc\xa5\x7f\xf0\xbd\x8b\xf6\x75\x70\x7d\xe9\x7c\xf8\x70" +
	"\x72\x1c\x76\xbc\x03\x29\x56\x33\x6f\x2d\x1c\x7c\xbc\xfa\xf8\xe1\x92\xb6\xdf\xed\x3f\x1b\x8a\xfb\xf2\x2f\xe4\x01" +
	"\x0d\xff\x2e\x4e\xcf\x75\xaa\x6e\xca\xcd\xf3\xa4\xcf\x88\x52\x45\x23\x80\xf6\xd3\x93\x09\x82\x06\x55\x4c\x44\x51" +
	"\x1e\xf7\x5f\xbe\x54\x57\xe0\xe9\x09\x90\x29\x9c\x50\x44\xa6\x0d\x89\x07\xf0\xe5\x8b\xd5\x5f\x79\xf1\xc2\xe5\x64" +
	"\x50\xa9\xe3\x64\x60\x6e\x7f\xf1\xcb\x0e\xe9\x08\x03\x93\x98\x2a\x42\x80\xa1\xe9\x56\x72\xb1\x17\x6e\x40\x27\x72" +
	"\x93\x9b\x6f\x87\x2c\xa3\x41\xc1\x30\xc3\x51\x6a\x30\x20\x50\x96\xef\x5f\xb8\x5e\xa6\xb5\xe0\xa0\xc7\x29\xf6\xac" +
	"\x62\x61\xcd\x49\x68\x11\x45\x0c\x4d\x5a\x65\x24\x55\x18\x58\x10\x10\x4d\x4a\xb2\xd9\xb9\xa0\x57\x64\x22\x23\xd3" +
	"\x61\xbe\xf2\x94\x8d\x23\x92\xa4\x0c\xed\x52\x51\xc5\x69\xb7\x2c\x20\x92\x12\x1b\x47\x29\xe1\x01\x06\x3d\x2b\x24" +
	"\x4c\x61\x65\xd4\x0b\x57\xa5\x84\x4f\x1c\x2c\x6d\xc1\xd9\xd8\xea\x5f\x17\x76\x70\x32\xa0\x51\x9e\x1d\x5c\xc7\xf0" +
	"\x2d\x15\xa2\xbe\xe0\xb6\x47\x64\x7e\xa6\xff\x0b\x26\xd7\x29\x9c\x55\x2d\xc9\x9c\xd3\x3c\x49\x78\x50\xf5\x08\xaf" +
	"\xac\xb9\x26\x93\x94\xc7\xe3\x04\x74\xd0\x5f\x59\x38\xaa\xca\x51\x30\xe7\x38\x0b\x68\xd0\xb3\xbe\xe9\xd8\x7e\xed" +
	"\xaa\xb8\xa1\x90\xc9\x9c\x5d\x39\xa9\x7c\x36\x69\x7d\x46\x00\xa0\x6e\x85\x61\xb5\x4d\x05\x49\xe7\x98\x00\x5c\xca" +
	"\xd3\x4c\x97\x51\x63\xea\x9d\x35\x23\x64\x82\x51\x0a\x66\x41\xca\x88\x8f\xb1\x60\x01\xca\x9e\xf5\x96\x32\x8d\xb2" +
	"\xc0\x10\x16\xcf\x73\x9b\x17\xee\xa8\x13\x8c\xba\xca\xc5\x19\xab\x61\xa9\x30\xd4\x1e\xf3\xfe\x63\x1a\x43\x8c\xf6" +
	"\x5d\x32\xd7\xa4\x45\x54\xc7\x99\x97\x27\x9f\xd3\xec\x91\x86\x28\x9d\x81\x39\x18\xdb\x94\xe5\x8c\x5a\x7d\x97\x4e" +
	"\x80\x10\x08\x89\x5d\x08\x94\xe1\x1a\xd3\x20\x40\xde\xb3\xb4\xcc\xd0\x84\x03\xed\xc3\x95\xc8\xa4\x8f\x20\x38\x1c" +
	"\xe4\x9c\xe6\x68\x5d\x87\xd1\x49\x94\x64\xac\x7e\xd4\x79\x39\x71\x1a\x73\xc7\x96\x97\x87\x79\x9e\xb9\x0b\x9d\xf3" +
	"\xac\x2c\x1e\xd2\xb4\xe4\xd7\x9c\x39\xc3\x60\x62\x17\xf2\x72\x59\x4e\x64\x5d\x68\xfe\xb2\x5d\x1c\x83\xa6\x09\xe6" +
	"\x91\x5d\x73\x7c\xb9\x30\xe6\x70\x32\xa8\x4a\xac\xd1\x68\x24\x6a\xc5\xd9\x5a\x6a\xd0\xf7\xec\x91\x62\x38\x1b\xa4" +
	"\xb3\x71\x6f\x8f\x94\xdd\x6a\x9b\x64\x63\xab\xc4\x6e\x35\xab\x27\x11\x86\x0a\xb5\xdd\xca\xd7\x49\x60\x6f\x56\x0f" +
	"\xe5\x8b\x42\x84\x45\xe5\x0b\x16\x4d\x5e\x14\x48\x13\x54\x8a\x44\xb8\xcc\xba\x85\xc0\xab\xae\xe5\x4f\x9b\xbf\x39" +
	"\x67\x7d\xbb\x32\x7a\x7d\xce\xfa\x4e\x65\xf4\xfa\x9c\xf5\x9d\x6f\xdc\x4f\x46\x95\x2e\xef\x67\x0e\xf1\x01\xc7\x86" +
	"\xb4\x78\x59\x4d\x40\xbd\x3d\xfa\x74\xb6\x6f\x3a\x98\xc4\x0c\xd8\x3a\xa6\xd3\x1e\xe7\x1b\xd7\x6f\x99\x5b\x16\x7d" +
	"\x54\x3c\x17\xfb\x38\x33\xed\xdb\x24\x68\x27\xf1\x93\x77\x83\xff\x41\xe4\xfc\x3b\xae\xff\xaa\xef\x53\xc2\x91\x41" +
	"\xfe\xb3\x56\x93\xe7\xfc\x3e\xcf\x9f\xd7\x5e\xca\x23\xab\xff\x9e\x21\x51\x08\xa6\x1f\x00\xca\x5f\x2e\x78\x7e\xb9" +
	"\xb8\x69\x3b\x16\x76\x01\x70\xd3\x45\x1a\xc0\x8d\xc2\x32\x27\x01\xc9\x74\x8c\x5c\x57\x87\xa2\x45\xb5\xb1\x16\xa6" +
	"\x6f\x95\x50\x14\x27\xca\x95\x26\xdc\xc7\xbc\x1d\x8e\x50\x03\xf1\x7d\x54\x0a\x2a\x2e\xc1\xd1\x36\x09\x03\x52\xa2" +
	"\xd4\x50\xc8\x40\x75\x17\x6d\x71\x96\x18\xe3\xa6\x93\x63\xca\xc7\xa1\x25\x18\x00\x26\xb9\xfa\xe9\x09\x1a\xc6\xe2" +
	"\x4c\x32\xd3\x20\x55\xa2\x9e\xe6\xe0\x69\x6e\xa7\x92\x26\x44\x8e\x7f\x20\x55\xd3\x88\xdb\x94\xc3\x90\xea\xb8\x96" +
	"\xad\x9f\x03\x61\xc9\xf9\xcc\xe7\x88\x1f\xbd\x2d\xc5\x74\xb4\x78\x4f\x26\x53\xf3\xc4\x59\xd3\x57\x29\xb3\xab\x31" +
	"\xb2\x7e\x55\xc8\xa4\xdb\x58\xcc\x10\xc5\xcc\xb9\x44\xca\xf4\xeb\xb5\x6e\x27\x1f\xaf\xad\x7e\x6b\x75\x0d\x3a\xeb" +
	"\x5b\x55\xc7\x53\x63\xae\x39\xbd\xf0\xeb\xd7\x34\xe5\xdf\xd1\xac\xfe\x95\x48\x10\xae\xa8\xc6\x79\x5d\x35\xdf\xcf" +
	"\xba\xaa\x0e\xb3\xcc\xda\x5f\x49\x08\xc5\x57\x83\xfc\xa7\x1d\x50\x95\x50\xa5\x8a\xcf\x95\x52\x98\x62\x97\xbf\x98" +
	"\x85\xfa\xad\x6e\xd7\x67\x62\xd2\xc4\x96\xda\x2a\x1d\x45\x4c\x31\xe2\x21\xeb\x59\xbb\x39\x5f\xbf\x00\xbb\x24\xd8" +
	"\xfe\xcf\xdc\x11\xb5\x5d\xe2\x9d\xf6\x89\x75\x3f\x69\x29\x78\x54\x6d\xfc\x80\x63\x73\x9b\xac\xfe\x47\x22\x39\xe5" +
	"\xd1\x4b\x33\xdd\x1a\x86\xfe\xac\x47\x27\xce\x58\x74\xe5\x62\xa8\x2d\x44\x9d\x09\xb7\xfb\x8b\x0c\xe5\x18\x7e\xe3" +
	"\x68\x2e\x36\x91\xe3\x7c\x36\x9e\x7c\xa9\xfc\x55\xc1\x31\x19\x90\xab\x62\x7e\x4b\x59\x16\x51\xae\x7e\x9f\x0e\xaf" +
	"\x3f\x30\xd8\xdd\x9b\x81\x7a\xec\xb4\x1a\xad\x76\x63\xb5\x5c\x2d\x1d\xea\x96\x7c\x99\x14\x6a\xdf\xbb\x3c\xf5\xde" +
	"\x5d\x3c\x9e\xa6\xfc\xe4\xe8\x61\x3f\x90\xef\x07\x1b\xec\x7c\xbc\xb5\xdb\xde\x88\x0f\x2f\xfe\xf8\x94\x6e\x92\xd5" +
	"\xb3\xd1\xce\xc5\x3f\x18\xe9\x6c\x1b\x8e\xb8\xcf\xb2\x00\x81\x30\x06\xbe\x48\x52\xca\x30\xa8\xd0\xc2\x6f\x1e\x32" +
	"\x31\xfc\xfd\x4f\x10\x12\x68\xc9\x48\x79\x40\x07\x34\xc8\x08\xcb\x07\x7a\x05\x44\x01\x47\x0c\x30\xf8\x29\xdf\x7c" +
	"\xed\x5b\xee\xbd\x9a\xfb\xda\xf9\x7d\x5f\xdd\xac\xdd\xed\xe3\x49\x78\xf0\xee\xfc\x9e\x34\x9b\x1b\x67\x67\x7b\x9d" +
	"\xdb\x37\x47\xcd\x9d\xce\xf9\xd5\xdd\xf9\x85\x87\x07\xeb\x8f\xed\xb0\x7d\xdb\x8c\xb3\xcd\xe7\xfb\xea\x07\x20\xf9" +
	"\x8c\xa6\x9e\x20\xb2\x9c\xe4\x37\x1a\xad\x1a\xe9\x79\x50\xf6\x48\xb8\x79\x90\x1d\xb5\xf1\xf4\xe4\xf0\x98\x9d\x7f" +
	"\x3c\xbd\xbc\x74\x1e\x2f\xc7\x5b\xbb\xec\xb3\x7f\xbf\x7a\x7d\x73\x95\x25\xde\xe8\xf6\x70\xeb\xe1\xe0\xe8\x9f\x1d" +
	"\xfb\x4e\xad\x2f\x51\x29\xfa\x34\xa4\x7e\x3d\xde\x97\x1e\x65\xad\x99\x31\xb6\xcf\xe8\x75\x1d\x53\x90\xfb\x2b\xae" +
	"\x53\xfc\x01\xe6\xff\x03\x00\x00\xff\xff\x17\xc4\xe8\x17\x91\x19\x00\x00")

func bindataIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataIndexhtml,
		"index.html",
	)
}



func bindataIndexhtml() (*asset, error) {
	bytes, err := bindataIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "index.html",
		size: 6545,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1497477306, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataApplicationjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x5b\x73\xdb\xb8\x0e\x7e\xcf\xaf\x40\xd3\x9c\x4a\x3a\x51\x14\xa7" +
	"\x97\x97\xa4\x3e\x9d\x8e\xcf\x76\xa7\x33\xed\x36\xb3\xcd\xdb\xce\xee\x0e\x23\x41\x36\x1b\x9a\xd4\x90\x70\x1c\x6f" +
	"\x27\xff\x7d\x07\xd4\x8d\x92\xe5\x5e\x5e\x12\x8b\x02\x81\x8f\x1f\x81\x0f\xd0\xf9\x39\xfc\x8a\x1a\xad\x20\x2c\xe0" +
	"\x76\x07\x0b\x53\x96\x88\x9f\x73\x2b\x2b\x82\x8b\xec\xe2\x79\xf6\xf2\x28\x2e\x37\x3a\x27\x69\x74\x9c\xc0\xd7\x23" +
	"\x80\x7b\x61\x21\x57\xb2\xba\x35\xc2\x16\x29\xe4\x16\x05\xe1\x5b\x85\x96\xda\x87\x4f\x37\xd7\xef\x09\xd7\x29\xe4" +
	"\x1b\x6b\x51\xd3\x8d\x5c\xa3\xd9\x50\x0a\x05\x2a\xb1\x4b\xa1\x44\xca\x57\x0b\x53\xa0\x6b\x7e\xbf\xd7\xd7\xd6\x2c" +
	"\x2d\x3a\x5e\x90\x8a\xd0\x2e\x56\x42\x2f\x31\x05\xa9\x25\x49\xa1\xe4\x3f\xf8\xb6\xaa\x94\xcc\x05\x03\x49\x41\x12" +
	"\x63\x96\x46\x2f\xea\x08\xc1\xca\x6f\xf8\x40\x29\x54\x16\xdf\xb1\xe7\x14\x2c\x96\x16\xdd\x8a\x31\xd8\x3e\x8a\x43" +
	"\x7b\x8f\x76\x61\xb4\x46\x7f\xb6\x5f\xac\x35\x36\x05\x92\xf9\x1d\xff\x5d\xe3\x07\x2c\x29\x85\x4d\x55\x08\xc2\x06" +
	"\x6a\xfd\x70\xdd\x78\xbe\x3a\x3a\x82\xd1\x01\x61\x0e\xb3\x7a\xb9\xa5\x07\xe6\xa0\x37\x4a\xf9\xc5\x16\x52\xb8\x36" +
	"\x3a\x3d\xcc\xa1\x14\xca\xa1\x7f\x37\x09\x71\x60\x31\x66\x01\xe6\x10\x35\x88\xa2\xa1\x01\x93\xc2\x6f\x35\x3e\x34" +
	"\xaf\x4e\xc6\xd7\x0a\x20\x4b\x88\x4f\xe2\xe8\xd6\x14\xbb\x28\xc9\x56\xc2\x2d\x94\x70\x2e\x8e\x1c\x09\xc2\x33\x27" +
	"\x97\x1a\x0b\xa9\xa3\xa4\xb5\x07\xb0\x48\x1b\xab\xa7\x2f\x29\x4e\xae\xbc\xd5\xe3\x11\xc0\x63\x52\xd3\x12\x66\x07" +
	"\x9f\xa4\x45\x20\x09\xd7\xad\x57\x4e\x2f\x43\x55\x9d\x40\x54\xa9\xda\x0b\x55\x0a\xe6\x70\x12\x47\x4f\xa9\x52\x67" +
	"\x86\xaa\x33\xde\xc3\x30\x69\xad\xda\x50\xcd\x36\x6f\x48\x95\x1a\xae\x66\xa5\xd4\x45\x1c\x65\xb7\xa2\x58\x62\x94" +
	"\x64\x84\x0f\xe4\x03\x67\xb9\x29\x30\xb3\x58\x29\x91\x63\x7c\xfe\x57\x9c\x7d\x7d\xf1\x98\xd4\x7f\x4f\xce\x53\x88" +
	"\x4e\x2e\xe0\xe4\x79\x94\x4c\xbb\x23\x49\x6a\xe8\x4e\x8b\x35\x4e\xda\xca\xac\x14\x51\x92\x89\xa2\xa8\x89\x3d\x2e" +
	"\xc5\xd9\x31\x9c\x82\xdf\x25\x73\xa3\x9b\x5d\x0d\xab\xed\x66\x51\x55\xa8\x8b\x1b\xc3\x77\xf3\xf4\x0e\x77\x4a\x3a" +
	"\x6a\xd0\x3c\x06\xb4\xfa\x0a\x0c\x49\xa5\x5d\x85\x29\xdc\xe1\x6e\x6b\xb8\x4e\xd7\xe8\x9c\xe0\x92\xa2\x3a\x59\x43" +
	"\xbe\x85\xe2\xe2\x3d\x40\x76\xb3\x71\xc4\x35\x6f\x19\x11\xcd\x4b\xc1\xe9\x04\x03\xf2\x07\x64\x24\xa1\x4d\x43\x5d" +
	"\x03\xad\x25\xaf\x79\x9c\x30\xec\x11\x78\xc3\xe6\x71\x10\x35\xe4\xa8\x79\x9f\x1b\x4d\x42\x6a\xb4\xdd\xd5\x71\x82" +
	"\x37\xa7\x87\xff\xc1\x6c\x2f\x8f\xbd\x3c\xb5\x16\x29\xec\x15\x48\x60\xea\xa3\x5a\x5c\x9b\x7b\x6c\x19\xa9\xd3\xbc" +
	"\x4b\x79\x7f\x35\xde\x63\x78\x29\x7e\xe1\xe3\x67\xcc\x59\xe9\xee\xba\x4b\x68\xbc\x6e\xa5\x2e\xcc\x36\x73\xd8\x2a" +
	"\x4a\x5c\xde\xb5\xb2\xe9\x37\x05\xb7\xde\x8b\xe8\xa8\x92\xea\x8a\x0f\xaf\xb7\x10\x24\x52\x70\x9b\x3c\x47\xe7\xde" +
	"\x6d\x74\xde\xd3\x31\x12\xa0\x31\x25\xfd\x79\xa6\xb4\x8a\xec\x06\x7b\x57\x5d\x68\x98\xcf\xe7\x7b\xda\xd4\x7b\x0e" +
	"\x70\xc0\x3c\x54\xd8\x26\x18\xa0\x72\xf8\x4d\xeb\x5e\x82\x7b\x74\xdf\x47\x00\xcf\x9e\xf5\x1a\xfc\x64\x5e\xab\x70" +
	"\x0f\x8b\x49\x82\x79\x67\xd1\xde\xe9\x9e\x6a\xef\xc1\x8a\x79\x67\x97\x03\xfb\xbc\x35\x77\x7b\x92\x89\x2f\xe2\x21" +
	"\x6e\xc3\x6d\xac\xba\x84\x63\x96\x1e\x97\x7d\x71\x46\xbf\x91\x34\x6f\xc4\xa0\x46\x9d\x0e\x23\x5d\x86\x21\xd3\x00" +
	"\xf3\xcd\xae\xc2\x4b\x88\xd8\x47\xd4\xae\x23\xb7\x8a\xcb\xe9\x04\x3e\xd8\x72\x5a\x83\x40\x4e\xe2\xa8\xe0\x36\x6c" +
	"\xa3\x14\xa2\x4f\xa6\x72\x19\xff\xf8\xec\xfb\x12\xe4\x66\xa3\x0a\xd0\x86\xe0\x16\xc1\xd7\x5a\x4e\x58\x64\xf0\x51" +
	"\xec\x6e\x11\x76\x66\x03\xb1\xb1\x40\x2b\x6c\x1a\x59\x02\xc2\x22\x98\xb2\x54\x52\xe3\x1b\xf8\x1d\x95\x11\x05\x90" +
	"\x01\xb2\x3b\x10\x4b\x21\x35\x7b\x9f\x25\x57\xe3\x52\x3b\xd4\x07\xfb\xec\x03\x78\xec\xd8\x22\x41\x1b\xc7\xe9\x74" +
	"\x19\x9c\xf9\xe5\xec\xe2\x00\x1b\xe3\xd2\x53\xa6\xee\x5e\x99\xf5\xf8\xe2\x00\x4e\x17\x03\xe0\xd5\x6c\x76\xd0\xdf" +
	"\x77\xf9\xfd\x3e\xc3\x37\x1d\x69\x60\xd1\x55\x46\x17\x58\xc0\x56\xd2\x0a\x04\x37\x5b\x42\xab\x85\xaa\x2f\x39\xfb" +
	"\x11\x22\x7f\x8a\xca\x36\x6d\xdb\xff\x8f\xa1\xe6\x04\xb3\x59\xa8\x3a\xa1\xd8\xd4\x36\xb5\xb7\xfa\x77\xd3\x4b\xea" +
	"\x87\x28\xc9\xee\x85\x8a\x93\x8c\xcc\x07\xb3\x45\xbb\x10\xae\x53\xd0\xb6\x52\xe2\x28\x0b\x3a\x3c\x8a\x7c\xd5\x0f" +
	"\x2b\xb2\x78\x48\x01\x83\xba\xad\xa7\x16\x54\xc9\x64\x47\x1e\xc5\xc9\xd6\x82\xd8\x9b\x87\x92\x78\x99\x18\xaa\x40" +
	"\x00\x82\x5d\xae\x64\x11\xea\xfb\x50\x9a\x46\xb6\x6e\x65\xb6\x81\xed\x1e\x79\x93\x53\xd2\x14\x8b\x83\x3e\x9f\xe1" +
	"\xba\xa2\x5d\xeb\x77\xc0\xe3\xad\x3f\xef\x1d\xee\x36\x55\x34\x9c\x9b\x1b\x6b\x9e\x66\xe3\x57\xb3\xd9\xf4\x10\x3c" +
	"\x24\xbd\x6f\x27\xf1\x9e\x74\xf7\x67\x98\xf2\x73\x28\x11\x1c\x77\xe0\xc2\xf1\x20\x5d\x47\x0a\x16\x38\xe7\x9a\x21" +
	"\x3b\x3c\x1a\xaf\xf1\xc9\x72\x1e\x3b\xb7\xb2\xa0\x55\x94\x42\x1c\xee\x3b\x87\x17\x33\xf8\x2f\x5c\xcc\x66\x09\x9c" +
	"\xc2\xf1\x7f\x8e\x83\xd6\x1e\xda\xbd\x86\x8b\xd9\x40\xf0\xdb\xab\xe6\xc5\x27\x93\x75\xb0\x37\x0e\x4c\x51\xc2\x83" +
	"\xf4\x5e\x97\x67\x9e\xf7\x9a\xfc\xb7\xfb\xfb\x7b\xae\x62\x2e\x84\xbe\xc1\x07\x34\xb7\xdc\x1c\xa2\x56\x9b\x6d\x8d" +
	"\x41\x9b\x2d\x37\x26\xdc\xc2\xff\x05\x71\x7e\x2f\xeb\xd1\x61\x54\x51\xf1\xe8\x3b\xe5\x8c\x37\x26\x70\xce\x3c\xce" +
	"\xfa\xb0\x41\x2f\x1e\x1c\x87\xfb\x5b\x10\x5d\xa6\xa0\x50\xfb\xa4\x4a\x81\xcc\x1d\x36\xed\x6e\xef\x63\xa8\xc3\xc5" +
	"\x1e\x32\xfe\xf6\xf8\x7b\x6b\x45\xb5\x87\x92\x2f\xaf\xfb\x64\xea\xaf\xa1\x5b\xca\x0a\x74\x64\xcd\x2e\xfc\xa4\xf8" +
	"\x66\x99\x58\x2c\x61\xee\xbb\x63\xe6\xf1\x35\xa3\x45\x69\x2c\xc4\x92\xbf\xd2\xfc\x09\x60\xce\x86\x99\x42\xbd\xa4" +
	"\xd5\x15\x48\x78\xcd\xab\x57\x20\x4f\x4f\x7b\x10\x7e\x7f\x6d\xf9\x87\xfc\xb3\xad\xee\xc1\x97\x4c\xec\x6d\x06\xd8" +
	"\x06\x1f\x80\xb8\x85\x45\xfb\x1c\x4a\x5b\xda\x07\xc1\x07\x0a\x1a\x0a\x59\xb9\x5c\xa2\x9d\x54\xa5\xf6\xdd\xe4\xe7" +
	"\x4c\xd2\x7d\xc6\x44\xc0\x8d\x24\x9a\x94\xa3\xa1\x8e\xb7\x9c\xf5\xc3\x6f\x5d\x95\x75\x95\xcd\x26\xc7\xe0\x1f\xd4" +
	"\x8c\x3e\x60\xb8\x61\xba\x37\x86\x19\x78\xdd\xcf\x5c\x93\x49\x18\xcc\x64\xbc\xfc\x33\x21\x1e\x93\x2c\x17\x4a\xc5" +
	"\xb4\x92\x2c\x80\xff\x06\x00\x00\xff\xff\x7e\xb6\x9d\xc5\x00\x11\x00\x00")

func bindataApplicationjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataApplicationjs,
		"application.js",
	)
}



func bindataApplicationjs() (*asset, error) {
	bytes, err := bindataApplicationjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "application.js",
		size: 4352,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1521804617, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"index.html":     bindataIndexhtml,
	"application.js": bindataApplicationjs,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"application.js": {Func: bindataApplicationjs, Children: map[string]*bintree{}},
	"index.html": {Func: bindataIndexhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
