// Code generated by go-bindata.
// sources:
// index.html
// application.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x69\x73\xdb\x38\xef\x7f\xdd\x7c\x0a\x54\x9d\x9d\xdd\xed\xae\x2c\x1f\x71\x0e\x47\xf6\x4c\x9a\xa4\xb9\x9b\xe6\x6c\x93\x9d\x7d\x41\x49\x90\xc4\x84\x22\x55\x92\xf2\x91\x4c\xbf\xfb\x7f\xa8\xc3\x96\x1d\xb7\xcd\x76\xff\xcf\x33\xf3\xb4\x33\xb1\x08\x01\x20\xf0\x03\x08\x80\x72\x5f\xef\x9e\xed\x5c\xdd\x7e\xdc\x83\x58\x27\x6c\xb0\xe2\x9a\x1f\x60\x84\x47\x7d\x0b\xb9\x35\x58\x01\x70\x63\x24\x81\x79\x00\x70\x13\xd4\x04\xfc\x98\x48\x85\xba\x6f\x65\x3a\xb4\x37\xac\xfa\xab\x58\xeb\xd4\xc6\x2f\x19\x1d\xf6\xad\xcf\xf6\xf5\xb6\xbd\x23\x92\x94\x68\xea\x31\xb4\xc0\x17\x5c\x23\xd7\x7d\xeb\x70\xaf\x8f\x41\x84\x73\x92\x9c\x24\xd8\xb7\x86\x14\x47\xa9\x90\xba\xc6\x3c\xa2\x81\x8e\xfb\x01\x0e\xa9\x8f\x76\xbe\xf8\x13\x28\xa7\x9a\x12\x66\x2b\x9f\x30\xec\xb7\x2a\x45\xaf\x6d\x1b\xae\x62\x04\xe2\x89\x21\x42\x07\x72\xc5\x9a\x44\x0a\xde\x26\x99\xd2\x6f\xc1\x17\x09\x42\x48\xa5\xd2\x40\x39\xe8\x18\xc1\xf8\xb6\x05\x84\x4f\x40\xe8\x18\x65\xbe\xae\xf6\x06\x23\x54\xc8\xbc\x25\xa1\x46\xf9\xd6\x88\x28\x2c\x54\xda\x76\xb9\xab\xa6\x9a\xe1\xe0\x86\x64\x4c\xc3\xd9\xd5\x47\xfb\xfa\xd0\x75\x0a\xda\xca\xcc\xac\x77\x42\x68\xa5\x25\x49\x67\x72\x8c\xf2\x07\x90\xc8\xfa\x96\xd2\x13\x86\x2a\x46\xd4\x16\xc4\x12\xc3\xbe\x65\x70\x54\x3d\xc7\xf1\x03\x7e\xaf\x1a\x3e\x13\x59\x10\x32\x22\xb1\xe1\x8b\xc4\x21\xf7\x64\xec\x30\xea\x29\x47\x8f\xa8\xd6\x28\x6d\xaf\xd2\xee\x74\x1a\x9d\xc6\xba\xe3\x2b\xe5\x4c\x69\xb6\x8e\x31\xc1\x46\x42\x79\xc3\x57\xca\xca\x37\x2f\xfe\x51\xae\x31\x92\x54\x4f\xfa\x96\x8a\x49\xbb\xbb\x66\xdf\x5d\xad\x1e\x7c\x4c\x83\x9d\x33\xdd\x66\xc3\xdd\x87\xcf\xe2\xe1\x20\x8b\x8f\xc2\xe0\xec\xf8\xf2\xe3\xfb\x93\x47\xdc\x3e\xa2\x0f\xdd\x6b\xe7\xfc\x0f\xb6\xda\xb7\xc0\x97\x42\x29\x21\x69\x44\x79\xdf\x22\x5c\xf0\x49\x22\x32\x65\x81\xf3\xff\xe7\x61\xee\xc5\x88\x68\x3f\x2e\x5d\x4b\x49\x8a\x72\xe6\xdc\xcb\xdc\x3a\x19\x1f\xd3\x83\xab\xf3\x07\xd1\xdc\xbd\xde\xb9\xbe\x8c\xe4\xe1\x71\xbb\x73\x79\x7b\x3a\x49\x86\x61\x76\xbf\x91\x8d\x3f\x27\x1e\x7b\x37\xbc\xf9\x94\x34\xff\x3b\x6e\x85\x82\x6b\x9b\x8c\x50\x89\x04\x9d\xd5\xc6\x7a\xa3\x99\xc7\xac\x4e\x7e\x99\x67\x78\x27\xe5\x91\x3f\xda\xf5\x9d\x4e\xb6\x1b\xab\x40\xaf\xb5\xd4\x49\x5b\x9c\xbd\xbb\xed\xac\xb5\xbf\x9c\x76\x98\xe0\xad\x68\xb2\x37\x7e\x38\xf9\x81\x67\x85\x6b\xb9\x43\x83\x72\x47\x4f\x04\x13\x78\x82\xdc\x28\x45\x1f\xb1\x07\xad\xb5\x74\xbc\x05\x29\x09\x02\xca\x23\x5b\x8b\xb4\x07\x9b\x4d\x43\xfa\x5a\x8a\x50\x78\x82\x84\xc8\x88\x72\x5b\xd2\x28\xd6\x3d\x68\x36\x56\x31\x99\x31\xbc\xd1\x98\xa4\x8c\x68\x54\xf0\x04\x01\x55\x29\x23\x93\x1e\x70\xc1\x71\xc6\xd3\xf0\x48\x10\x21\x3c\x81\x47\xfc\x87\x48\x8a\x8c\x07\xb6\x2f\x98\x90\x3d\x78\x83\x6d\xf3\x7f\x0b\xaa\x75\xb7\xdb\xdd\x9a\xb3\xb0\x6b\xcc\xc9\x09\x23\x2c\x2c\xf0\x04\x0b\xb6\x2a\xab\x72\x9b\x3b\x75\x93\x1b\x3e\x72\x8d\x12\x9e\x40\xe3\x58\xdb\x84\xd1\x88\xf7\xa0\x20\xd6\xb8\xee\xb3\xc4\x13\x5a\x0a\x0e\x71\xfb\x47\xbc\x42\xa7\x36\xd5\x98\xe4\x70\xe4\x25\xab\x07\xad\x46\xab\x8e\x43\x23\xf5\x88\x5c\xee\x62\xbb\xb5\xb9\x16\x76\xb6\x20\x2e\xed\x6f\x35\x9b\xbf\xd4\x05\x4d\x75\x22\x94\xe3\x72\x71\x2d\x09\x57\x29\x91\xc8\x75\x4d\x45\x1e\x36\xa1\xa8\xa6\x82\xf7\x80\x78\x4a\xb0\x4c\xe3\x16\x78\x42\x6b\x91\xf4\xa0\xb9\x05\x0c\x43\x9d\x3f\x54\x06\xe7\xdb\x3e\xda\x94\x07\x38\xee\xc1\xe6\xe6\x66\xcd\x08\xa5\x89\x46\x5b\xd1\x88\x63\x40\x39\xbc\x61\x22\xa2\xfc\x3b\x11\xad\xf3\x8b\x4c\xc3\x1b\x92\xa6\x8c\xfa\xc4\xd8\xf3\x2d\x31\xd7\x29\xb3\x71\x56\x45\x0f\xae\x4e\x4f\xba\xa0\x62\x9a\x00\xe1\x01\x5c\xa0\x4a\x05\x0f\x1a\xf7\x0a\x42\x21\xe1\x70\x6f\x03\x54\x96\x9a\xfe\x01\x22\x2c\x99\x91\x61\x82\x5c\xab\x5c\x20\xc1\x80\x12\xf8\x92\xa1\xa4\x58\xab\xe0\x46\xf5\xa7\xed\x8b\x0f\x87\x1f\xf6\x7b\x75\xa5\x81\x40\xc5\x7f\xd5\x30\x12\xf2\x01\x68\x08\x13\x91\x81\xe9\x50\x79\xe7\x48\x49\x84\x30\xa4\x04\x42\xca\xb0\xe7\x38\x73\xea\xfe\xa2\x21\x30\x0d\x87\x7b\xb0\xf9\x77\x75\x9c\x5c\xe5\x4b\x9a\x6a\x50\xd2\x7f\x71\x9d\x30\xdd\xb8\xab\x62\x3a\x74\x3a\x8d\xf5\x46\x67\xb6\xce\xab\xc3\xfd\x5c\x71\x58\x5e\x20\x3a\x47\x13\x67\xdf\xbb\x3c\x91\x51\x53\x6c\x4e\xba\x77\x5d\xde\xca\x46\xcd\x2f\xe3\xbb\xbd\x9d\x83\xf5\x9d\xb5\xb3\xf3\xf4\xe6\x5d\xf4\xe1\xfd\x2d\x69\x46\xdf\x2e\x10\x03\xd7\x29\x8c\xff\x37\xbe\xc8\x29\xb0\x4e\xab\xb1\xda\x68\x4f\x09\x2f\x75\x25\x5a\xa3\xdb\xe1\xf0\x2e\xfd\x83\xef\x9e\xb7\xaf\x82\xab\x0b\xe7\xe6\xe6\xf8\x28\xec\x78\xfb\x52\xac\x66\x5e\x37\x1c\x7e\xba\xfc\x74\x73\x41\xdb\x1f\xf6\x5e\xec\x8a\xfb\xfa\x2f\xe4\x01\x0d\xff\x2e\xa2\xe7\x3a\xd5\xb0\xe3\xe6\xd5\xcf\x67\x44\x29\x53\xe7\x4d\xfa\x3e\x3d\x99\x24\x68\x50\xc5\x44\x14\xe5\x79\xff\xf5\x6b\x75\x04\x9e\x9e\x00\x99\xc2\x29\x45\x64\xda\x90\x78\x00\x5f\xbf\x5a\x83\x95\x57\xaf\x5c\x4e\x86\x95\x3a\x4e\x86\xe6\xf4\x17\x3f\x76\x48\xc7\x18\x98\xc2\x54\x11\x02\x0c\xcd\x30\x91\x8b\xbd\x72\x03\x3a\x95\x9b\x9e\x7c\x3b\x64\x19\x0d\x0a\x86\x39\x8e\x52\x83\x71\x02\x65\xf9\xfe\x95\xeb\x65\x5a\x0b\x0e\x7a\x92\x62\xdf\x2a\x16\xd6\x82\x84\x16\x51\xc4\xd0\x94\x55\x46\x52\x85\x81\x05\x01\xd1\xa4\x24\x9b\x9d\x0b\x7a\x45\x26\x32\x32\x03\xe0\x1b\x4f\xd9\x38\x26\x49\xca\xd0\x2e\x15\x55\x9c\x76\xcb\x02\x22\x29\xb1\x71\x9c\x12\x1e\x60\xd0\xb7\x42\xc2\x14\x56\x46\xbd\x72\x55\x4a\xf8\x14\x60\x69\x0b\xce\x26\xd6\xe0\xaa\xb0\x83\x93\x21\x8d\xf2\xea\xe0\x3a\x86\x6f\xa9\x10\xf5\x05\xb7\x3d\x22\xf3\x98\xfe\x27\x98\x5c\xa7\x00\xab\x5a\x92\x05\xd0\x3c\x49\x78\x50\x75\xfe\x37\xd6\xc2\x0c\x48\xca\xf0\x38\x01\x1d\x0e\x56\x9e\x85\xaa\x02\x0a\x16\x80\xb3\x80\x06\x7d\xeb\xbb\xc0\x0e\x6a\x47\xc5\x0d\x85\x4c\x16\xec\xca\x49\xe5\xb3\x29\xeb\x73\x02\x00\x75\x2b\x0c\xab\x6d\x3a\x48\xba\xc0\x04\xe0\x52\x9e\x66\xba\xcc\x1a\xd3\xef\xac\x39\x21\x93\x8c\x52\x30\x0b\x52\x46\x7c\x8c\x05\x0b\x50\xf6\xad\xf7\x94\x69\x94\x85\x0f\x61\xf1\xbc\xb0\x79\x01\x47\x9d\x60\xd4\x55\x10\x67\xac\xe6\x4b\xe5\x43\xed\x31\x9f\x2a\x66\x39\xc4\xe8\xc0\x25\x0b\xa3\x57\x44\x75\x9c\x79\x79\xf1\x39\xc9\x1e\x69\x88\xd2\x19\x9a\xc0\xd8\xa6\x2d\x67\xd4\x1a\xb8\x74\xea\x08\x81\x90\xd8\x85\x40\x99\xae\x31\x0d\x02\xe4\x7d\x4b\xcb\x0c\x4d\x3a\xd0\x01\x5c\x8a\x4c\xfa\x08\x82\xc3\x7e\xce\x69\x42\xeb\x3a\x8c\x4e\xb3\x24\x63\xf5\x50\xe7\xed\xc4\x69\x2c\x84\x2d\x6f\x0f\x8b\x3c\x0b\x07\x3a\xe7\x59\x79\x1e\xa4\x59\xcb\xaf\x81\x39\xc7\x60\x72\x17\xf2\x76\x59\x5e\x98\x7a\xd0\xfc\x65\xab\x08\x83\xa6\x09\xe6\x99\x5d\x03\xbe\x5c\x18\x73\x38\x19\x56\x2d\xd6\x68\x34\x12\xb5\xe6\x6c\x2d\x35\xe8\x47\xf6\x48\x31\x9a\x4f\xd2\xf9\xbc\xb7\xc7\xca\x6e\xb5\x4d\xb1\xb1\x55\x62\x6f\x54\x0f\x22\x0c\x15\x6a\xbb\x78\x91\x04\xf6\x5a\xf5\x50\xbe\xe8\xe4\x6b\x16\x95\x2f\x58\x34\x7d\xf1\x9d\x04\x67\x54\xe9\x32\xc1\x73\xdf\x1e\x70\x62\x48\xcf\xb3\xdd\x44\xe4\xfd\xe1\xe7\xd3\x3d\x33\x02\x24\xe6\x02\xa9\x63\x3a\x1b\x12\xbe\x93\xbf\x73\x84\x65\x30\xaf\xcc\x9e\x8b\x7d\x9c\xb9\xf9\x67\x1a\xf5\x69\x00\xf2\x71\xea\x7f\x06\xfa\x6f\x62\x9f\x12\x8e\x0c\xf2\xbf\xb5\xa6\xb6\x80\xfb\x22\x7f\xde\xbc\x28\x8f\xac\xc1\x47\x86\x44\x21\x98\x86\x0a\x94\xbf\x7e\x86\xfc\x72\x71\xd3\xb7\x9f\xed\x02\xe0\xa6\xcf\x69\x00\xd7\x0a\xcb\x43\x0d\x24\xd3\x31\x72\x5d\x05\x45\x8b\x6a\x63\x2d\xcc\xe0\x27\xa1\xa8\xee\x94\x2b\x4d\xb8\x8f\xf9\x3c\x19\xa1\x06\xe2\xfb\xa8\x14\x54\x5c\x82\xa3\x6d\x4e\x1c\xa4\x44\xa9\x91\x90\x81\xea\x3d\xb7\xc5\x59\x62\x8c\x9b\x4e\xc3\x94\xdf\x27\x96\xf8\x00\x30\x2d\x76\x4f\x4f\xd0\x30\x16\x67\x92\x99\x09\xa3\x12\xf5\x34\x07\x4f\x73\x3b\x95\x34\x21\x72\xf2\x13\xb5\x8e\x46\xdc\xa6\x1c\x46\x54\xc7\xb5\x72\xf7\x12\x17\x96\xc4\xa7\x9e\xff\x4b\x99\x5e\x78\x5a\x8a\xeb\xc5\xf3\x73\x32\xbd\x4c\x4e\xc1\x9a\xbe\xaa\xee\x60\xf5\x63\x42\xa6\xad\xfa\x79\x75\x28\x2e\x6c\x4b\xa4\xcc\xb0\x5b\x1b\x15\xf2\xbb\xa9\x35\x68\xad\x76\xa1\xb3\xb6\x59\x8d\x0b\x35\xe6\x1a\xe0\x05\xa6\xdf\xd2\x94\x7f\x23\xb2\x06\x97\x22\x41\xb8\xa4\x1a\x17\x75\xd5\x70\xaf\xc1\x34\x07\x92\x41\xe7\xfe\x3c\x43\x39\x81\xdf\x38\x9a\x3c\x24\x72\x92\xdf\x85\xa6\xdf\x9b\x7e\x55\x70\x44\x86\xe4\xb2\x98\xd7\x53\x96\x45\x94\xab\xdf\x67\x97\x95\x9f\x18\xe4\xef\xcd\x05\x6a\xe2\xb4\x1a\xad\x76\x63\xb5\x5c\x2d\x1d\xe2\x97\x7c\x5f\x12\x6a\xcf\xbb\x38\xf1\x3e\x9c\x3f\x9e\xa4\xfc\xf8\xf0\x61\x2f\x90\x1f\x87\xeb\xec\x6c\xb2\xb9\xd3\x5e\x8f\x0f\xce\xff\xf8\x9c\x6e\x90\xd5\xd3\xf1\xf6\xf9\x3f\x18\xe1\x6d\x1b\x0e\xb9\xcf\xb2\x00\x81\x30\x06\xbe\x48\x52\xca\x30\xa8\xbc\x85\xdf\x3c\x64\x62\xf4\xfb\x9f\x20\x24\xd0\x92\x91\xf2\x80\x0e\x69\x90\x11\x96\x5f\xe0\x14\x10\x05\x1c\x31\xc0\xe0\x5f\x61\xf3\xad\x2f\x72\xf7\x6a\xe1\x9b\xd5\x8f\xb1\xba\xee\xde\xed\xe1\x71\xb8\xff\xe1\xec\x9e\x34\x9b\xeb\xa7\xa7\xbb\x9d\xdb\x77\x87\xcd\xed\xce\xd9\xe5\xdd\xd9\xb9\x87\xfb\x6b\x8f\xed\xb0\x7d\xdb\x8c\xb3\x8d\x97\x63\xf5\x13\x2e\xf9\x8c\xa6\x9e\x20\xb2\xbc\xb9\xad\x37\x5a\x35\xd2\xcb\x5c\xd9\x25\xe1\xc6\x7e\x76\xd8\xc6\x93\xe3\x83\x23\x76\xf6\xe9\xe4\xe2\xc2\x79\xbc\x98\x6c\xee\xb0\x2f\xfe\xfd\xea\xd5\xf5\x65\x96\x78\xe3\xdb\x83\xcd\x87\xfd\xc3\x7f\x16\xf6\xed\x5a\x1b\x55\x29\xfa\x34\xa4\x7e\x3d\xdf\x97\x86\xb2\xd6\x7b\x8d\xed\x73\x7a\x5d\xc7\xf4\x8f\xc1\x8a\xeb\x14\xdf\xc3\xff\x2f\x00\x00\xff\xff\x95\x7b\x82\xa0\x20\x17\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5920, mode: os.FileMode(436), modTime: time.Unix(1497471504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\xc1\x6e\xe3\x36\x10\xbd\xe7\x2b\x06\x59\x17\xa4\x1a\x85\x76\x76\xdb\x4b\x52\x1d\x0a\x17\x28\x16\xd8\xa2\x0b\x6c\x6e\x45\x5b\x30\xe2\xc8\xe6\x9a\x26\x05\x72\x1c\xc7\x5d\xf8\xdf\x0b\x8a\x96\x45\x39\xca\x5e\x8c\x88\x9a\x79\x7c\xf3\xf4\x66\x26\xf3\x39\xfc\x8e\x16\xbd\x24\x54\xf0\x74\x80\xa5\x6b\x1a\xc4\x2f\xb5\xd7\x2d\xc1\x9d\xb8\x7b\x2f\x7e\xba\xe2\xcd\xce\xd6\xa4\x9d\xe5\x05\x7c\xbb\x02\x78\x96\x1e\x6a\xa3\xdb\x27\x27\xbd\x2a\xa1\xf6\x28\x09\xff\x7c\xfc\xfc\x91\x70\x5b\x42\xbd\xf3\x1e\x2d\x3d\xea\x2d\xba\x1d\x95\xa0\xd0\xc8\x43\x09\x0d\x52\xbd\x5e\x3a\x85\xa1\x84\x46\x1b\x42\xbf\x5c\x4b\xbb\xc2\x12\xb4\xd5\xa4\xa5\xd1\xff\xe1\xaf\x6d\x6b\x74\x2d\xe3\x55\x25\x78\x6c\x3c\x86\x75\xc4\xf1\x9f\xbd\x5b\x79\x0c\xa1\x04\xd2\xf5\x26\xfe\x6e\xf1\x13\x36\x54\xc2\xae\x55\x92\xb0\xc3\x7d\xb8\xba\x82\x8b\xdb\xa1\x82\x45\x3a\xee\xe9\x42\x05\xcf\x4e\xab\xd3\xf1\xec\xb2\x34\x00\xdd\x00\x9f\x71\xf6\xe4\xd4\x81\x15\x62\x2d\xc3\xd2\xc8\x10\x38\x0b\x24\x09\x6f\x83\x5e\x59\x54\xda\xb2\xa2\x8f\x07\xf0\x48\x3b\x6f\xa7\xcb\xe0\xc5\x43\x17\x75\xbc\x02\x38\x16\x89\x4a\x2e\x17\x54\x70\x66\xa0\x09\xb7\x3d\x6a\x94\xd8\x51\x9b\x14\xa5\xd6\x24\x14\x6a\x0d\x54\x30\xe3\xec\x9d\xa3\xf6\x36\xc6\x47\x8a\xb4\x35\xfd\x35\xa7\x94\x2e\x88\x5a\x33\x3e\x15\x8d\xb6\x8a\x33\xf1\x24\xd5\x0a\x59\x21\x08\x5f\xa8\xbb\x54\xd4\x4e\xa1\xf0\xd8\x1a\x59\x23\x9f\xff\xc3\xc5\xb7\x0f\xc7\x22\xfd\xce\xe6\x25\xb0\xd9\x1d\xcc\xde\xb3\x62\x1a\x8e\x34\x99\x31\x9c\x95\x5b\x9c\x8c\xd5\xa2\x91\xac\x10\x52\xa9\x24\xea\x75\x23\x6f\xaf\xe1\x06\xba\x2c\x5d\x3b\x7b\xca\x3a\x29\xda\x27\xcb\xb6\x45\xab\x1e\x5d\xfc\x2e\xef\x36\x78\x30\x3a\xd0\x89\xcd\xb1\x93\xb4\xb3\x58\x2e\x65\x77\xf0\xc7\x17\xac\xa3\xd9\x36\xd4\xab\x7a\xc2\xdd\x6b\xab\xdc\x5e\x04\xec\x6d\xc2\x9b\x4d\x6f\xd4\x2e\x29\x83\x1e\x6c\x9b\xe3\x5f\x00\xce\x84\xfc\x2a\x5f\x78\x6f\x88\x9d\x37\xf7\xc0\xa2\xa8\x41\x7c\x0d\xce\xb2\xf2\xf4\x22\xec\xea\x1a\x43\xb8\xcf\x5d\xdb\xbf\x53\x92\xe4\xe3\xa1\xc5\x7b\x60\x5d\x4e\xb2\x4d\xce\x24\x6b\x9a\x29\x2e\xd1\x32\x29\x26\x89\x98\xfe\x3e\xf9\x25\x3d\xb0\x42\x3c\x4b\xc3\x0b\x41\xee\x93\xdb\xa3\x5f\xca\x80\x7c\xac\xf9\x8c\x33\x91\x99\x0b\x65\xbd\x1e\x7a\x44\xab\x97\x12\xd0\x0c\xd6\x4f\xcd\x82\xa6\x98\x34\xc3\xc5\x3d\x62\x2b\x29\xa2\x75\x54\x0a\xa8\xaa\x0a\xec\xce\x64\x68\x19\x89\x08\xb9\xd6\xea\xcc\x0e\xe0\x08\x68\x02\xbe\x15\x1b\xd6\x6e\x9f\xc5\xbe\x12\x6f\xb2\x39\xa7\x54\x1c\x59\x4c\xe0\xb6\xa5\x43\x8f\x3b\xd2\xf1\xa9\xab\x77\x83\x87\x5d\xcb\xc6\x03\xed\x14\x1d\x07\x15\xff\x79\xb1\x98\x1e\x64\x63\xd1\x07\x93\xf1\x8c\xf3\x54\xde\x5b\x1f\x3e\x60\xed\xac\x0a\x71\x26\x26\xe4\xec\x00\xaa\xf3\xbc\x7c\xfd\xb1\xdf\xc5\x57\xb1\xa0\x3a\x0e\xb9\xbd\x56\xb4\x66\x25\xf0\x3c\x7d\x0e\x1f\x16\xf0\x23\xdc\x2d\x16\x05\xdc\xc0\xf5\x0f\xd7\x19\xc7\x58\xe5\xab\xc6\xfb\x7e\xcf\x7d\xb4\x84\x3e\xda\x70\x68\xba\x11\x60\x62\xfa\x56\xa1\xd6\xed\x53\x09\xd6\xed\xa1\x02\x8b\x7b\xf8\x4d\x52\x74\xd7\x2a\xb5\xf3\x45\x89\xfc\x62\x21\xdc\xc6\xc4\x02\xe6\xb1\x9c\xc5\x70\x6d\xd6\x90\xa3\x72\x24\xc9\xfc\x76\x5d\x82\xc1\xb4\x9b\x4a\x20\xb7\x41\x9b\x2e\x7b\xb5\x75\xce\xbc\x22\x82\xb0\xf8\x42\xff\xee\xbd\x6c\x5f\xb1\x8c\x0d\x74\xde\x4d\x43\x27\x9c\x8f\x84\xc2\x40\xde\x1d\xf2\x3d\xf2\x5d\x93\x7a\x6c\xa0\xea\x86\x89\xe8\xf8\x85\xd3\x30\x70\x1e\xb8\x8e\xeb\xb0\xab\x00\xaa\x18\x28\x0c\xda\x15\xad\x1f\x40\xc3\x2f\xf1\xf4\x01\xf4\xcd\xcd\x40\xa2\xcb\x4f\x91\x7f\xe9\xbf\xfb\xde\x1a\xad\x2f\xde\xc5\x8c\xb8\xe5\x9b\x36\xaa\xb0\xec\x9f\xf3\xc1\x52\x0e\x97\xe0\x0b\xdd\x0f\x82\x93\xd7\xab\x55\x9c\x0e\x13\x7d\xde\xbf\x9b\xdc\x63\xc5\x79\x7f\x31\x60\x25\x30\x36\x39\x0c\xc6\x53\xf4\xc2\x2a\x9d\x15\xf9\xd0\x2a\xc9\xf3\x8b\xfc\x5f\x97\xb3\x51\x8f\x85\xa8\xa5\x31\x9c\xd6\x3a\x1e\xfe\x1f\x00\x00\xff\xff\x78\x16\x98\xe2\x46\x09\x00\x00")

func applicationJsBytes() ([]byte, error) {
	return bindataRead(
		_applicationJs,
		"application.js",
	)
}

func applicationJs() (*asset, error) {
	bytes, err := applicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application.js", size: 2374, mode: os.FileMode(436), modTime: time.Unix(1497471689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"application.js": applicationJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"application.js": &bintree{applicationJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

