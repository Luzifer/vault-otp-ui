// Code generated by go-bindata.
// sources:
// index.html
// application.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x39\x69\x73\xd4\x46\xd3\x9f\xf1\xaf\x68\x44\xe5\x4d\x42\xa2\xd5\x1e\x3e\xd7\xda\xad\x32\xb6\xf1\x8d\xf1\x05\xd8\xa9\x7c\x18\x49\x2d\x69\xec\xd1\x8c\x98\x19\xed\x61\x17\xff\xfd\xad\xd1\xb1\xab\x3d\x00\x07\xf2\x04\xaa\x6c\x4d\xab\xbb\xa7\xef\x43\x76\x5f\xee\x9d\xef\x5e\xdf\xbe\xdf\x87\x58\x27\xac\xbf\xe2\x9a\x5f\xc0\x08\x8f\x7a\x16\x72\xab\xbf\x02\xe0\xc6\x48\x02\xf3\x00\xe0\x26\xa8\x09\xf8\x31\x91\x0a\x75\xcf\xca\x74\x68\x6f\x5a\xf5\x57\xb1\xd6\xa9\x8d\x9f\x33\x3a\xe8\x59\x9f\xec\x9b\x1d\x7b\x57\x24\x29\xd1\xd4\x63\x68\x81\x2f\xb8\x46\xae\x7b\xd6\xd1\x7e\x0f\x83\x08\x67\x28\x39\x49\xb0\x67\x0d\x28\x0e\x53\x21\x75\x0d\x79\x48\x03\x1d\xf7\x02\x1c\x50\x1f\xed\xfc\xf0\x27\x50\x4e\x35\x25\xcc\x56\x3e\x61\xd8\x6b\x55\x8c\x5e\xda\x36\x5c\xc7\x08\xc4\x13\x03\x84\x0e\xe4\x8c\x35\x89\x14\xbc\x4e\x32\xa5\x5f\x83\x2f\x12\x84\x90\x4a\xa5\x81\x72\xd0\x31\x82\xd1\x6d\x1b\x08\x1f\x83\xd0\x31\xca\xfc\x5c\xdd\x0d\x86\xa8\xa0\x79\x4d\x42\x8d\xf2\xb5\x21\x51\x58\xb0\xb4\xed\xf2\x56\x4d\x35\xc3\xfe\x07\x92\x31\x0d\xe7\xd7\xef\xed\x9b\x23\xd7\x29\x60\x2b\x53\xb1\xde\x08\xa1\x95\x96\x24\x9d\xd2\x31\xca\x1f\x40\x22\xeb\x59\x4a\x8f\x19\xaa\x18\x51\x5b\x10\x4b\x0c\x7b\x96\xb1\xa3\xea\x3a\x8e\x1f\xf0\x7b\xd5\xf0\x99\xc8\x82\x90\x11\x89\x0d\x5f\x24\x0e\xb9\x27\x23\x87\x51\x4f\x39\x7a\x48\xb5\x46\x69\x7b\x15\x77\xa7\xd3\xe8\x34\x36\x1c\x5f\x29\x67\x02\xb3\x75\x8c\x09\x36\x12\xca\x1b\xbe\x52\x56\x7e\x79\xf1\x8f\x72\x8d\x91\xa4\x7a\xdc\xb3\x54\x4c\xda\x6b\xeb\xf6\xdd\xf5\xea\xe1\xfb\x34\xd8\x3d\xd7\x6d\x36\xd8\x7b\xf8\x24\x1e\x0e\xb3\xf8\x38\x0c\xce\x4f\xae\xde\xbf\x3d\x7d\xc4\x9d\x63\xfa\xb0\x76\xe3\x5c\xfc\xc1\x56\x7b\x16\xf8\x52\x28\x25\x24\x8d\x28\xef\x59\x84\x0b\x3e\x4e\x44\xa6\x2c\x70\xfe\x3d\x0d\x73\x2d\x86\x44\xfb\x71\xa9\x5a\x4a\x52\x94\x53\xe5\x9e\xa7\xd6\xe9\xe8\x84\x1e\x5e\x5f\x3c\x88\xe6\xde\xcd\xee\xcd\x55\x24\x8f\x4e\xda\x9d\xab\xdb\xb3\x71\x32\x08\xb3\xfb\xcd\x6c\xf4\x29\xf1\xd8\x9b\xc1\x87\x8f\x49\xf3\xbf\x51\x2b\x14\x5c\xdb\x64\x88\x4a\x24\xe8\xac\x36\x36\x1a\xcd\xdc\x67\x75\xf0\xf3\x34\xc3\x3b\x29\x8f\xfd\xe1\x9e\xef\x74\xb2\xbd\x58\x05\x7a\xbd\xa5\x4e\xdb\xe2\xfc\xcd\x6d\x67\xbd\xfd\xf9\xac\xc3\x04\x6f\x45\xe3\xfd\xd1\xc3\xe9\x77\x34\x2b\x54\xcb\x15\xea\x97\x37\x7a\x22\x18\xc3\x13\xe4\x42\x29\xfa\x88\x5d\x68\xad\xa7\xa3\x6d\x48\x49\x10\x50\x1e\xd9\x5a\xa4\x5d\xd8\x6a\x1a\xd0\x97\x92\x84\xc2\x13\x24\x44\x46\x94\xdb\x92\x46\xb1\xee\x42\xb3\xb1\x8a\xc9\x14\xe1\x95\xc6\x24\x65\x44\xa3\x82\x27\x08\xa8\x4a\x19\x19\x77\x81\x0b\x8e\x53\x9c\x06\x61\x28\x35\x3c\x81\x47\xfc\x87\x48\x8a\x8c\x07\x36\x4d\x48\x84\x13\x44\xa8\x30\x3d\x12\x44\x38\x8b\xe9\x0b\x26\x64\x17\x5e\x61\xdb\xfc\xdf\x86\xea\xbc\xb6\xb6\xb6\x3d\xa3\xcb\x9a\x11\x3c\x07\x0c\xb1\x90\xd5\x13\x2c\xd8\xae\xe4\xcf\xb5\xeb\xd4\x95\x6b\xf8\xc8\x35\x4a\x78\x02\x8d\x23\x6d\x13\x46\x23\xde\x85\x02\x58\xc3\xba\xcf\x12\x4f\x68\x29\x38\xc4\xed\xef\xe1\x0a\x9d\xda\x54\x63\x92\x1b\x2e\x2f\x6e\x5d\x68\x35\x5a\x75\x8b\x35\x52\x8f\xc8\xe5\x2a\xb6\x5b\x5b\xeb\x61\x67\x1b\xe2\x52\xfe\x56\xb3\xf9\x4b\x9d\xd0\xd4\x31\x42\x39\x2e\x27\xd7\x92\x70\x95\x12\x89\x5c\xd7\x58\xe4\x0e\x16\x8a\x6a\x2a\x78\x17\x88\xa7\x04\xcb\x34\x6e\x83\x27\xb4\x16\x49\x17\x9a\xdb\xc0\x30\xd4\xf9\x43\x25\x70\x7e\xed\xa3\x4d\x79\x80\xa3\x2e\x6c\x6d\x6d\xd5\x84\x50\x9a\x68\xb4\x15\x8d\x38\x06\x94\xc3\x2b\x26\x22\xca\xbf\xe1\xfb\x3a\xbe\xc8\x34\xbc\x22\x69\xca\xa8\x4f\x8c\x3c\x5f\x23\x73\x9d\x32\x6e\xa7\xf5\xf6\xf0\xfa\xec\x74\x0d\x54\x4c\x13\x20\x3c\x80\x4b\x54\xa9\xe0\x41\xe3\x5e\x41\x28\x24\x1c\xed\x6f\x82\xca\x52\xd3\x69\x40\x84\x25\x32\x32\x4c\x90\x6b\x95\x13\x24\x18\x50\x02\x9f\x33\x94\x14\x6b\xb5\xde\xb0\xfe\xb8\x73\xf9\xee\xe8\xdd\x41\xb7\xce\x34\x10\xa8\xf8\xaf\x1a\x86\x42\x3e\x00\x0d\x61\x2c\x32\x30\xbd\x2c\xef\x31\x29\x89\x10\x06\x94\x40\x48\x19\x76\x1d\x67\x86\xdd\x5f\x34\x04\xa6\xe1\x68\x1f\xb6\xfe\xae\x12\xcf\x55\xbe\xa4\xa9\x06\x25\xfd\x67\x57\x14\xd3\xb7\xd7\x54\x4c\x07\x4e\xa7\xb1\xd1\xe8\x4c\xcf\x79\x1d\xb9\x9f\x29\x23\xcb\x4b\x49\xe7\x78\xec\x1c\x78\x57\xa7\x32\x6a\x8a\xad\xf1\xda\xdd\x1a\x6f\x65\xc3\xe6\xe7\xd1\xdd\xfe\xee\xe1\xc6\xee\xfa\xf9\x45\xfa\xe1\x4d\xf4\xee\xed\x2d\x69\x46\x5f\x2f\x25\x7d\xd7\x29\x84\xff\x19\x5d\xe4\xc4\xb0\x4e\xab\xb1\xda\x68\x4f\x00\xcf\x55\x25\x5a\xa7\x3b\xe1\xe0\x2e\xfd\x83\xef\x5d\xb4\xaf\x83\xeb\x4b\xe7\xc3\x87\x93\xe3\xb0\xe3\x1d\x48\xb1\x9a\x79\x6b\xe1\xe0\xe3\xd5\xc7\x0f\x97\xb4\xfd\x6e\xff\xd9\xaa\xb8\x2f\xff\x42\x1e\xd0\xf0\xef\xc2\x7b\xae\x53\x8d\x45\x6e\x5e\x27\x7d\x46\x94\x32\x1d\xc1\x84\xef\xd3\x93\x09\x82\x06\x55\x4c\x44\x51\x1e\xf7\x5f\xbe\x54\x29\xf0\xf4\x04\xc8\x14\x4e\x20\x22\xd3\x06\xc4\x03\xf8\xf2\xc5\xea\xaf\xbc\x78\xe1\x72\x32\xa8\xd8\x71\x32\x30\xd9\x5f\xfc\xb2\x43\x3a\xc2\xc0\x14\xa6\x0a\x10\x60\x68\xc6\x8e\x9c\xec\x85\x1b\xd0\x09\xdd\x24\xf3\xed\x90\x65\x34\x28\x10\x66\x30\x4a\x0e\x46\x09\x94\xe5\xfb\x17\xae\x97\x69\x2d\x38\xe8\x71\x8a\x3d\xab\x38\x58\x73\x14\x5a\x44\x11\x43\x53\x56\x19\x49\x15\x06\x16\x04\x44\x93\x12\x6c\x6e\x2e\xe0\x15\x98\xc8\xc8\x8c\x8a\xaf\x3c\x65\xe3\x88\x24\x29\x43\xbb\x64\x54\x61\xda\x2d\x0b\x88\xa4\xc4\xc6\x51\x4a\x78\x80\x41\xcf\x0a\x09\x53\x58\x09\xf5\xc2\x55\x29\xe1\x13\x03\x4b\x5b\x70\x36\xb6\xfa\xd7\x85\x1c\x9c\x0c\x68\x94\x57\x07\xd7\x31\x78\x4b\x89\xa8\x2f\xb8\xed\x11\x99\xfb\xf4\x7f\x81\xe4\x3a\x85\xb1\xaa\x23\x99\x33\x9a\x27\x09\x0f\xaa\x19\xe1\x95\x35\x37\x2d\x92\xd2\x3d\x4e\x40\x07\xfd\x95\x05\x57\x55\x86\x82\x39\xc3\x59\x40\x83\x9e\xf5\x4d\xc3\xf6\x6b\xa9\xe2\x86\x42\x26\x73\x72\xe5\xa0\xf2\xd9\x94\xf5\x19\x02\x80\xba\x14\x06\xd5\x36\x1d\x24\x9d\x43\x02\x70\x29\x4f\x33\x5d\x46\x8d\xe9\x77\xd6\x0c\x91\x09\x46\x29\x98\x05\x29\x23\x3e\xc6\x82\x05\x28\x7b\xd6\x5b\xca\x34\xca\x42\x87\xb0\x78\x9e\xbb\xbc\x30\x47\x1d\x60\xd8\x55\x26\xce\x58\x4d\x97\x4a\x87\xda\x63\x3e\x7f\x4c\x63\x88\xd1\xbe\x4b\xe6\x86\xb4\x88\xea\x38\xf3\xf2\xe2\x73\x9a\x3d\xd2\x10\xa5\x33\x30\x8e\xb1\x4d\x5b\xce\xa8\xd5\x77\xe9\x44\x11\x02\x21\xb1\x0b\x82\x32\x5c\x63\x1a\x04\xc8\x7b\x96\x96\x19\x9a\x70\xa0\x7d\xb8\x12\x99\xf4\x11\x04\x87\x83\x1c\xd3\xb8\xd6\x75\x18\x9d\x44\x49\xc6\xea\xae\xce\xdb\x89\xd3\x98\x73\x5b\xde\x1e\xe6\x71\xe6\x12\x3a\xc7\x59\x59\x74\xd2\xb4\xe5\xd7\x8c\x39\x83\x60\x62\x17\xf2\x76\x59\xae\x56\x5d\x68\xfe\xb2\x5d\xb8\x41\xd3\x04\xf3\xc8\xae\x19\xbe\x3c\x18\x71\x38\x19\x54\x2d\xd6\x70\x34\x14\xb5\xe6\x6c\x2d\x15\xe8\x7b\xf2\x48\x31\x9c\x0d\xd2\xd9\xb8\xb7\x47\xca\x6e\xb5\x4d\xb1\xb1\x55\x62\xb7\x9a\xd5\x93\x08\x43\x85\xda\x6e\xe5\xe7\x24\xb0\x37\xab\x87\xf2\x45\x41\xc2\xa2\xf2\x05\x8b\x26\x2f\x0a\x4d\x13\x54\x8a\x44\xb8\x4c\xba\x85\xc0\xab\xd2\xf2\xa7\xc5\xdf\x9c\x93\xbe\x5d\x09\xbd\x3e\x27\x7d\xa7\x12\x7a\x7d\x4e\xfa\xce\x37\xf2\x93\x51\xa5\xcb\xfc\xcc\x55\x7c\xc0\xb1\x01\x2d\x26\xab\x09\xa8\xb7\x47\x9f\xce\xf6\xcd\x04\x93\x98\x4d\x59\xc7\x74\x3a\xe3\x7c\x23\xfd\x96\x99\x65\xd1\x46\xc5\x73\x71\x8f\x33\x33\xbe\x4d\x82\x76\x12\x3f\xf9\x34\xf8\x1f\x44\xce\xbf\x63\xfa\xaf\xda\x3e\x25\x1c\x19\xe4\x3f\x6b\x3d\x79\xce\xee\xf3\xf8\x79\xef\xa5\x3c\xb2\xfa\xef\x19\x12\x85\x60\xe6\x01\xa0\xfc\xe5\x82\xe5\x97\x93\x9b\xb1\x63\xe1\x16\x00\x37\x5d\x84\x01\xdc\x28\x2c\x6b\x12\x90\x4c\xc7\xc8\x75\xe5\x14\x2d\xaa\x8b\xb5\x30\x73\xab\x84\xa2\x39\x51\xae\x34\xe1\x3e\xe6\xe3\x70\x84\x1a\x88\xef\xa3\x52\x50\x61\x09\x8e\xb6\x29\x18\x90\x12\xa5\x86\x42\x06\xaa\xbb\x28\x8b\xb3\x44\x18\x37\x9d\xb8\x29\x5f\x87\x96\xe8\x00\x30\xa9\xd5\x4f\x4f\xd0\x30\x12\x67\x92\x99\x01\xa9\x22\xf5\x34\x07\x4f\x73\x3b\x95\x34\x21\x72\xfc\x03\xa5\x9a\x46\xdc\xa6\x1c\x86\x54\xc7\xb5\x6a\xfd\x1c\x15\x96\xf8\x67\xbe\x46\xfc\x68\xb6\x14\xdb\xd1\x62\x9e\x4c\xb6\xe6\x89\xb1\xa6\xaf\x52\x66\x57\x6b\x64\x3d\x55\xc8\x64\xda\x58\xac\x10\xc5\xce\xb9\x84\xca\xcc\xeb\xb5\x69\x27\x5f\xaf\xad\x7e\x6b\x75\x0d\x3a\xeb\x5b\xd5\xc4\x53\x43\xae\x19\xbd\xb0\xeb\xd7\x38\xe5\x1f\xc4\xac\xfe\x95\x48\x10\xae\xa8\xc6\x79\x5e\x35\xdb\xcf\x9a\xaa\xae\x66\x59\xb5\xbf\x52\x10\x8a\xaf\x06\xf9\x4f\x3b\xa0\x2a\xa1\x4a\x15\xdf\x1d\xa5\x30\xcd\x2e\x7f\x31\xab\xea\xb7\xa6\x5d\x9f\x89\xc9\x10\x5b\x72\xab\x78\x14\x31\xc5\x88\x87\xac\x67\xed\xe6\x78\xfd\x42\xd9\x25\xc1\xf6\x7f\x26\x47\xd4\x76\xa9\xef\x74\x4e\xac\xdb\x49\x4b\xc1\xa3\xea\xe2\x07\x1c\x9b\x6c\xb2\xfa\x1f\x89\xe4\x94\x47\x2f\xcd\x76\x6b\x10\xfa\xb3\x16\x9d\x18\x63\xd1\x94\x8b\xa1\xb6\x10\x75\x26\xdc\xee\x2f\x32\x94\x63\xf8\x8d\xa3\x49\x6c\x22\xc7\xf9\x6e\x3c\xf9\x52\xf9\xab\x82\x63\x32\x20\x57\xc5\xfe\x96\xb2\x2c\xa2\x5c\xfd\x3e\x5d\x5e\x7f\x60\xb1\xbb\x37\x0b\xf5\xd8\x69\x35\x5a\xed\xc6\x6a\x79\x5a\xba\xd4\x2d\xf9\x32\x29\xd4\xbe\x77\x79\xea\xbd\xbb\x78\x3c\x4d\xf9\xc9\xd1\xc3\x7e\x20\xdf\x0f\x36\xd8\xf9\x78\x6b\xb7\xbd\x11\x1f\x5e\xfc\xf1\x29\xdd\x24\xab\x67\xa3\x9d\x8b\x7f\xb0\xd2\xd9\x36\x1c\x71\x9f\x65\x01\x02\x61\x0c\x7c\x91\xa4\x94\x61\x50\x69\x0b\xbf\x79\xc8\xc4\xf0\xf7\x3f\x41\x48\xa0\x25\x22\xe5\x01\x1d\xd0\x20\x23\x2c\x5f\xe8\x15\x10\x05\x1c\x31\xc0\xe0\xa7\x6c\xf3\xb5\x6f\xb9\xf7\x6a\xee\x6b\xe7\xf7\x6d\x75\xb3\x76\xb7\x8f\x27\xe1\xc1\xbb\xf3\x7b\xd2\x6c\x6e\x9c\x9d\xed\x75\x6e\xdf\x1c\x35\x77\x3a\xe7\x57\x77\xe7\x17\x1e\x1e\xac\x3f\xb6\xc3\xf6\x6d\x33\xce\x36\x9f\x6f\xab\x1f\x50\xc9\x67\x34\xf5\x04\x91\xe5\x26\xbf\xd1\x68\xd5\x40\xcf\x53\x65\x8f\x84\x9b\x07\xd9\x51\x1b\x4f\x4f\x0e\x8f\xd9\xf9\xc7\xd3\xcb\x4b\xe7\xf1\x72\xbc\xb5\xcb\x3e\xfb\xf7\xab\xd7\x37\x57\x59\xe2\x8d\x6e\x0f\xb7\x1e\x0e\x8e\xfe\x99\xdb\x77\x6a\x73\x89\x4a\xd1\xa7\x21\xf5\xeb\xf1\xbe\xd4\x95\xb5\x61\xc6\xc8\x3e\xc3\xd7\x75\x4c\x43\xee\xaf\xb8\x4e\xf1\x97\x94\xff\x0f\x00\x00\xff\xff\xaf\x2a\x4e\x03\x5a\x19\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6490, mode: os.FileMode(436), modTime: time.Unix(1497474487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _applicationJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xdd\x6e\xdb\xb8\x12\xbe\xcf\x53\x0c\x52\x1f\x48\x3a\x51\x18\x27\xed\xb9\x49\x8e\x77\x51\x64\x81\x45\x81\x16\x2d\xd0\xdc\x2d\x76\x17\xb4\x38\xb2\x59\xd3\xa4\x40\x8e\xa3\x68\x8b\xbc\xfb\x82\xa2\x7e\x28\x5b\x6e\x6f\x12\x8b\x9c\xdf\x6f\x66\x3e\xce\xcd\x0d\xfc\x8e\x1a\x2d\x27\x14\xb0\x6e\xe0\xd1\x94\x25\xe2\xd7\xc2\xca\x8a\xe0\x96\xdd\xde\xb1\x77\x17\x69\x79\xd0\x05\x49\xa3\xd3\x0c\xbe\x5f\x00\x3c\x73\x0b\x85\x92\xd5\xda\x70\x2b\x72\x28\x2c\x72\xc2\xf7\x0a\x2d\xf5\x1f\x9f\x9f\xbe\x7c\x20\xdc\xe7\x50\x1c\xac\x45\x4d\x4f\x72\x8f\xe6\x40\x39\x08\x54\xbc\xc9\xa1\x44\x2a\xb6\x8f\x46\xa0\xcb\xa1\x94\x8a\xd0\x3e\x6e\xb9\xde\x60\x0e\x52\x4b\x92\x5c\xc9\x7f\xf0\x7d\x55\x29\x59\x70\xef\x37\x07\x8b\xa5\x45\xb7\xf5\x76\xec\x17\x6b\x36\x16\x9d\xcb\x81\x64\xb1\xf3\x7f\xf7\xf8\x11\x4b\xca\xe1\x50\x09\x4e\xd8\xda\x7d\xb8\xb8\x80\x23\xef\xb0\x82\x65\x38\xee\x63\x87\x15\x3c\x1b\x29\xba\xe3\xc5\x71\x9e\x00\xb2\x84\x74\x91\x26\x6b\x23\x9a\x24\x63\x5b\xee\x1e\x15\x77\x2e\x4d\x1c\x71\xc2\x6b\x27\x37\x1a\x85\xd4\x49\xd6\xcb\x03\x58\xa4\x83\xd5\xf3\x69\xa4\xd9\x43\x2b\xf5\x7a\x01\xf0\x9a\x85\x50\x62\xb8\x60\x05\x43\x04\x92\x70\xdf\x5b\xf5\x78\x1b\xaa\x02\xa2\x54\xa9\x60\x85\x2a\x05\x2b\x58\xa4\xc9\x1b\xaa\xd4\xb5\xa1\xea\xda\xeb\xf8\x30\x69\xaf\x7a\x57\x9d\x5a\x2b\x48\x95\x9a\x9e\xb2\x52\x6a\x91\x26\x6c\xcd\xc5\x06\x93\x8c\x11\xbe\x50\xeb\x98\x15\x46\x20\xb3\x58\x29\x5e\x60\x7a\xf3\x57\xca\xbe\xbf\x7d\xcd\xc2\xdf\xc5\x4d\x0e\xc9\xe2\x16\x16\x77\x49\x36\x6f\x8e\x24\xa9\xa9\x39\xcd\xf7\x38\x2b\x2b\x59\xc9\x93\x8c\x71\x21\x02\xb0\x97\x25\xbf\xbe\x84\x2b\x68\xb5\x64\x61\x74\xa7\xd5\xa1\xda\x2b\xf3\xaa\x42\x2d\x9e\x8c\xaf\xcd\x9b\x1d\x36\x4a\x3a\xea\xa2\x79\x8d\x60\x6d\x5b\x32\x06\x95\x9a\x0a\x73\xd8\x61\x53\x1b\xdf\xb8\x7b\x74\x8e\xfb\xa6\xa3\xd0\x20\x31\xde\x5c\xf9\x6e\x3e\x03\x76\xa7\x78\x84\xb5\x57\x39\x02\xda\x1f\x45\xd9\x71\x1f\x50\x9b\xa0\x8f\x24\x96\xe9\xa0\xeb\x42\xeb\xc1\xeb\x3e\x67\x04\xc7\x08\x5a\xc1\xee\x73\xe2\x35\xc6\xa8\xbb\x2f\x8c\x26\x2e\x35\xda\xa1\x74\xbe\xc1\xbb\xec\xe1\x17\x58\x9e\xf4\x71\x3b\xaf\xbd\x44\x0e\x27\x03\x12\x89\xb6\x5e\x2d\xee\xcd\x33\xf6\x88\x84\x36\x1f\x5a\xbe\x2d\x4d\x6b\x31\x2e\x4a\x7b\xf0\xe9\x2b\x16\x9e\x0b\x76\x43\x11\x3a\xab\xb5\xd4\xc2\xd4\xcc\x61\x3f\xc5\x69\xb9\xeb\x79\xa4\x55\x8a\xaa\x3e\xb2\x4a\x6c\xff\xc8\xe0\x82\xf1\x6f\xfc\x25\xed\xc3\x3f\x58\x75\x0f\x89\xef\x77\xc7\xbe\x39\xa3\x93\xbc\xbb\x70\x87\xa2\x40\xe7\xee\x63\x52\xe9\xef\x04\x27\xfe\xd4\x54\x78\x0f\xc9\x44\x07\xad\x35\xf6\x7e\x1e\xa5\xa8\x25\xd3\x44\x78\xb2\xb3\x49\x0e\xc9\x67\x53\x39\xe6\x7f\x7c\x45\xfb\x8c\x16\x0a\x73\x50\x02\xb4\x21\x58\x23\xb4\xf5\x2a\x08\x05\x83\x4f\xbc\x59\x23\x34\xe6\x00\xa9\xb1\x40\x5b\x04\xd7\x2a\x64\xc0\x2d\x82\x29\x4b\x25\x35\xfe\x0a\x1f\xa0\x96\x4a\xf9\x5c\x6d\x03\x52\x03\x87\x12\x6b\x70\xbe\xf2\xa2\xf5\xf3\xbf\xe5\x72\x39\x54\xe7\xa8\xcc\xfe\x2e\xe6\xe6\xb1\x8a\x03\x28\xc4\xe9\xe0\xfc\xe5\x7d\x94\xda\xbb\xe5\xed\x99\xa4\x8f\xcb\xa8\x4c\x60\x42\x66\x51\x19\x2e\xd2\x28\x92\xc1\x07\xf8\x18\xcf\xda\xfb\x19\x8c\x4f\x03\x32\x60\xd1\x55\x46\x0b\x14\x50\x4b\xda\x02\xf7\xac\x4c\x68\x35\x57\xa1\x50\xec\xe7\x68\xdd\x4d\xd1\x3a\xc2\xeb\xee\x1c\x5e\xa1\xdf\xc7\xff\xaf\x71\x93\x46\xcf\xdd\x5c\x9b\x7a\xf2\x09\x32\xc1\x5a\xf8\xdd\x91\x4f\xf8\x48\x32\xf6\xcc\x55\x9a\x31\x32\x1f\x4d\x8d\xf6\x91\xbb\x61\xe4\xfa\x2e\x4f\x13\x16\x3d\x09\xc8\x8b\xed\xf8\xba\x49\xf1\x92\x03\xaa\x11\xd8\xf0\xcc\xa1\xca\x66\x29\xfc\xc8\x0f\xdb\x73\xf2\xd6\xda\x50\x32\x58\xad\x56\xa0\x0f\x4a\xcd\x30\x42\x30\xb9\x95\x22\x26\x04\x40\xe5\xf0\x9c\xac\xdb\x9a\x3a\x92\x3d\x01\x6f\xf6\x59\x9d\x43\x71\xf2\x30\x30\xdc\x57\xd4\xf4\x76\x27\x38\xae\xdb\x7c\x77\xd8\x1c\xaa\x64\xba\x8a\x74\xd2\x7e\xc5\xf0\x83\x31\xbf\x82\x4c\x41\x1f\x3b\x21\x8d\x62\x9e\xd3\x3b\x57\xf8\xae\xf5\xfc\x36\x13\x2c\x47\x07\xb0\x1a\x36\x9d\xd3\x62\xbf\xf1\x57\x3e\xa1\xc2\xaf\x27\xb5\x14\xb4\x4d\x72\x48\x63\xf5\x1b\x78\xbb\x84\xff\xc2\xed\x72\x99\xc1\x15\x5c\xfe\xe7\x32\x8a\xd1\x67\x79\xc2\xc9\x3f\xa6\xe3\x0f\x7e\x96\x7c\x1b\x8e\x7c\x3c\x31\x18\x22\x3d\x97\xa8\x36\x75\x48\x41\x9b\x1a\x56\xa0\xb1\x86\xdf\x38\xf9\xee\xda\x04\xa6\x3f\x4a\x31\x3d\x5a\xe5\xae\xbd\x62\x06\x37\x3e\x9d\xe5\xe8\x36\xe2\xea\x49\x3a\x9c\x78\xec\x5d\xe6\xa0\x30\x6c\x95\x39\x90\xd9\xa1\x0e\xce\x4e\xf6\xc5\x21\x2e\x6f\x81\x69\x7c\xa1\xbf\x6b\xcb\xab\x93\x28\xfd\x00\x0d\x5b\xe5\x38\x09\xc3\x11\x13\xe8\xc8\x9a\x26\xde\x00\x7f\xd8\xa4\x16\x4b\x58\xb5\xef\x0c\x6b\xe3\x73\x1d\x19\x18\x0b\xa9\xf4\x8b\x6c\x9b\x01\xac\xbc\x20\x53\xa8\x37\xb4\x7d\x00\x09\xff\xf7\xa7\x0f\x20\xaf\xae\xc6\x20\x5a\xfd\x20\xf9\x87\xfc\xb3\x9f\xad\xc9\xe2\x99\xb6\x32\x93\xd8\xe2\x1d\xd9\xa3\xf0\xd8\x7f\xc7\xc4\x92\x8f\x4e\xf0\x85\x22\xce\x26\x2b\x37\x1b\xcf\x0e\x33\x73\xde\xdf\xcd\x6e\x9f\xd9\xb0\x75\x26\xe0\xe9\x3c\x99\x25\x83\x29\x8b\x1e\xb5\xca\xb8\xb2\x84\x51\x09\x3d\x7f\x4a\xd4\xbe\x63\x5e\x33\x56\x70\xa5\x52\xda\x4a\x7f\xf8\x6f\x00\x00\x00\xff\xff\xa3\xad\x57\xcb\x0d\x0d\x00\x00")

func applicationJsBytes() ([]byte, error) {
	return bindataRead(
		_applicationJs,
		"application.js",
	)
}

func applicationJs() (*asset, error) {
	bytes, err := applicationJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "application.js", size: 3341, mode: os.FileMode(436), modTime: time.Unix(1497474914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"application.js": applicationJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"application.js": &bintree{applicationJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

